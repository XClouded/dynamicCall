package cn.uc.gamesdk;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import cn.uc.gamesdk.iconst.CApi;
import cn.uc.gamesdk.iface.IDexClassLoader;
import cn.uc.gamesdk.iface.IDispatcher;
import cn.uc.gamesdk.tools.FileUtil;
import cn.uc.gamesdk.tools.GlobalVars;
import dalvik.system.DexClassLoader;

public class DexLoader implements IDexClassLoader {

	private static final String CLASS_NAME = "DexLoader";

//	private static DexLoader dexLoader = null;// 保存加载dex的对象

	// private Map<String, DexClassPath> dexPathMap = null;// 接口对应的dex表
	// private Set<DexClassPath> dexSet = null;// 保存无重复而会用到的dex名称及其对应的入口

	private Map<String, IDispatcher> dispatcherMap = null;// APINAME->DISPATCHER
	private Map<String, IDispatcher> dexClassMap = null;// dexName->已加载dispatcher

//	public static DexLoader getInstance() {
//		if (null == dexLoader)
//			dexLoader = new DexLoader();
//
//		return dexLoader;
//
//	}

	public Map<String, IDispatcher> Creator() {
		initConfig();
		return dispatcherMap;
	}

	/*
	 * 主要是从配置文件中获取接口对应的入口类与所在DEX文件名（目前硬编码)
	 */
	private void initConfig() {
		// dexPathMap = new HashMap<String, DexClassPath>();
		// dexSet = new LinkedHashSet<DexClassPath>();

		dispatcherMap = new HashMap<String, IDispatcher>();
		dexClassMap = new HashMap<String, IDispatcher>();

		String[] apiNames = { CApi.API_LOGIN, CApi.API_GET_SID,
				CApi.API_WEBVIEW, CApi.API_UPDATE };
		String[] classPaths = { "cn.uc.gamesdk.core.Dispatcher",
				"cn.uc.gamesdk.core.Dispatcher",
				"cn.uc.gamesdk.core.Dispatcher",
				"cn.uc.gamesdk.update.Dispatcher" };
		String[] dexPaths = { "jars/core.jar", "jars/core.jar",
				"jars/core.jar", "jars/update.jar" };

		IDispatcher classDispatcher = null;

		for (int i = 0; i < apiNames.length; i++) {
			String apiName = apiNames[i];
			String className = classPaths[i];
			String dexName = dexPaths[i];

			if (dexClassMap.containsKey(dexName)) {
				// 如果已经加载过此dex，则直接返回
				dispatcherMap.put(apiName, dexClassMap.get(dexName));
			} else {
				DexClassLoader classLoader = new DexClassLoader(
						FileUtil.getFilePath() + File.separator + dexName,
						FileUtil.getCachePath(), null,
						GlobalVars.context.getClassLoader());

				try {
					Class libProviderClass = classLoader.loadClass(className);
					Method getInstanceMethod = libProviderClass
							.getDeclaredMethod("getInstance", null);

					classDispatcher = (IDispatcher) getInstanceMethod.invoke(
							null, null);

					classDispatcher.registerCallback(SdkListener.getInstance());// 注册统一回调侦听器
					dexClassMap.put(dexName, classDispatcher);
					dispatcherMap.put(apiName, classDispatcher);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}

		}
	}
}
