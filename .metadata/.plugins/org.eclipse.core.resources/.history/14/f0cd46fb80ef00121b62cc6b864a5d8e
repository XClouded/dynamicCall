package cn.uc.gamesdk.bridge;

import java.io.File;
import java.lang.ref.WeakReference;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.Stack;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONObject;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.InputType;
import android.text.format.DateUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebBackForwardList;
import android.webkit.WebChromeClient;
import android.webkit.WebHistoryItem;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import cn.uc.gamesdk.bridge.RelativeLayoutSoftKeyboardDetect.KeyboardListener;
import cn.uc.gamesdk.bridge.api.BridgeInterface;
import cn.uc.gamesdk.bridge.api.ServiceManager;
import cn.uc.gamesdk.common.CommonConst;
import cn.uc.gamesdk.common.GlobalVars;
import cn.uc.gamesdk.common.ICallback;
import cn.uc.gamesdk.common.UCApplication;
import cn.uc.gamesdk.common.UCThreadFactory;
import cn.uc.gamesdk.log.ErrorLogConst;
import cn.uc.gamesdk.log.StatLogConst;
import cn.uc.gamesdk.log.UCLog;
import cn.uc.gamesdk.setting.SdkPreference;
import cn.uc.gamesdk.util.StringUtil;
import cn.uc.gamesdk.util.net.HttpConnection;
import cn.uc.gamesdk.view.LoadingMask;

public class WebBridge extends Activity implements BridgeInterface, KeyboardListener {
    public static final String CLASS_NAME = "WebBridge";
    public static final String LOADING_TIP_CONTENT = "正在加载";

    private static final String JAVASCRIPT = "javascript:";
    private static final String PREFIX_HTTP_PROTOCOL = "http://";
    private static final String PREFIX_HTTPS_PROTOCOL = "https://";

    public static final int TOP_BAR_HEIGHT_DIP = 44;
    public static final int BOTTOM_BAR_HEIGHT_DIP = 55;

    public RelativeLayoutSoftKeyboardDetect rootLayout; // 主布局

    public CallbackServer callbackServer;

    // The webview for our app
    protected BridgeWebView webView;
    protected WebViewClient webViewClient;

    protected ServiceManager serviceManager;

    // Flag indicates that a loadUrl timeout occurred
    protected int loadUrlTimeout = 0;

    // LoadUrl timeout value in msec (default of 40 sec)
    protected int loadUrlTimeoutValue = 40000;

    // Keep app running when pause is received. (default = true)
    // If true, then the JavaScript and native code continue to run in the
    // background
    // when another application (activity) is started.
    // 在activity退出（onPause），后继续运行javascript脚本及本地代码
    protected boolean keepRunning = true;

    /**
     * 是否允许返回历史。控制以下两种情况：<br>
     * 1 按后退键返回历史
     * 2 按系统返回键盘返回历史
     */
    private boolean enableBackHistory = true;

    /**
     * 是否允许使用键盘返回键退出SDK。
     */
    private boolean enableKeyboardBackExit = true;

    /**
     * 是否绑定硬键盘返回键
     */
    private boolean keyboardBackButtonBound = false;

    /**
     * 在使用new关键字创建webview对象时，使用。
     */
    private static boolean webViewClearRAMCacheNeeded = false;

    private static WeakReference<WebView> webViewWeakRef;

    private static final int ID_VIEW_TOP_BAR = 1;

    private static int ACTIVITY_STARTING = 0;
    private static int ACTIVITY_RUNNING = 1;
    private static int ACTIVITY_EXITING = 2;

    public Stack<String> urls = new Stack<String>();

    // Webview 当前加载的url。
    public String currentUrl = null;

    private View _viewTopBar;

    private BridgeProgressBar _progressBar = null;

    private EditText hiddenEdForFullScreenKeyboard = null;

    // 0=starting,
    // 1=running (after 1st resume)
    // 2=shutting down
    private int activityState = 0;

    private View.OnClickListener cancelLoadOnClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (WebBridge.this.webView != null) {
                WebBridge.this.webView.stopLoading();
            }
        }
    };

    /**
     * 执行触发更新历史事件的timer，用于延时触发onUpdate
     */
    private final static Timer updateWebviewHistoryTimer = new Timer();


    public static final int PROGRESS_UPDATE = 0;

    public Handler mHandler = new Handler() {

        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);

            switch (msg.what) {
            case PROGRESS_UPDATE:
                int progress = (Integer) msg.obj;
                if (_progressBar != null) {
                    _progressBar.setProgress(progress);
                }
                break;
            default:
                break;
            }


        }
    };


    public void setBackHistroyEnable(boolean enable) {
        this.enableBackHistory = enable;
    }

    public void setKeyboardBackExitEnable(boolean enable) {
        this.enableKeyboardBackExit = enable;
    }

    /**
     * Called when the activity is first created.
     * 
     * @param savedInstanceState
     */
    @TargetApi(11)
    @Override
    public void onCreate(Bundle savedInstanceState) {
        UCLog.debug(CLASS_NAME, "onCreate", "onCreate call");
        super.onCreate(savedInstanceState);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
        getWindow().getDecorView().setDrawingCacheEnabled(true);
    }

    /**
     * Initialize web container with web view objects.
     * 
     * @param url
     * 
     * @param
     * @param Client
     * @param webChromeClient
     */
    public void initWebUI(String url) {
        UCLog.debug(CLASS_NAME, "init", "WebBridge.initWebUI()");
        UCLog.statCost("WebBridge", "initWebUI", StatLogConst.BIZ_STEP_ENTER, "");
        initUI(url);
        initNOUILogic();
        UCLog.statCost("WebBridge", "initWebUI", StatLogConst.BIZ_STEP_COST, "");
    }


    /**
     * 初始化非ui逻辑
     * 
     * @param runable
     */
    public void initNOUILogic() {
        // ------------- 非ui逻辑 --------------
        // Create service manager
        if (this.serviceManager == null) {
            this.serviceManager = new ServiceManager(this.webView, this);
            this.serviceManager.init();
        }

        // Create callback server
        if (this.callbackServer == null) {
            this.callbackServer = new CallbackServer();
        }
    }


    public void showKeyboard(boolean isPassword, String text, String hint, final ICallback<String> callback) {
        if (hiddenEdForFullScreenKeyboard != null) {
            if (isPassword) {
                hiddenEdForFullScreenKeyboard.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
            } else {
                hiddenEdForFullScreenKeyboard.setInputType(InputType.TYPE_CLASS_TEXT);
            }
            hiddenEdForFullScreenKeyboard.setHint(hint);
            hiddenEdForFullScreenKeyboard.setVisibility(View.VISIBLE);
            hiddenEdForFullScreenKeyboard.getEditableText().clear();
            hiddenEdForFullScreenKeyboard.getEditableText().append(text);
            hiddenEdForFullScreenKeyboard.setImeOptions(EditorInfo.IME_ACTION_GO);
            hiddenEdForFullScreenKeyboard.setSingleLine(true);
            hiddenEdForFullScreenKeyboard.setImeActionLabel("确定", EditorInfo.IME_ACTION_DONE);
            hiddenEdForFullScreenKeyboard.requestFocus();
            InputMethodManager im = ((InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE));
            im.showSoftInput(hiddenEdForFullScreenKeyboard, 0);
            hiddenEdForFullScreenKeyboard.setOnEditorActionListener(new OnEditorActionListener() {
                @Override
                public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                    if (actionId == EditorInfo.IME_ACTION_SEARCH || actionId == EditorInfo.IME_ACTION_DONE || event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
                        if (event == null || !event.isShiftPressed()) {
                            if (hiddenEdForFullScreenKeyboard != null) {
                                hiddenEdForFullScreenKeyboard.setVisibility(View.GONE);
                            }
                            callback.callback(hiddenEdForFullScreenKeyboard.getEditableText().toString());
                            UCLog.debug(CLASS_NAME, "showKeyboard", "finish press value = " + hiddenEdForFullScreenKeyboard.toString());
                            return true;
                        }
                    }
                    return false;
                }
            });
        }

    }

    public void initUI(String url) {
        if (rootLayout == null) {
            rootLayout = new RelativeLayoutSoftKeyboardDetect(this);
            rootLayout.setBackgroundColor(Color.TRANSPARENT);
            rootLayout.registerKeyboardListener(this);
        }
        this.setContentView(rootLayout);

        WebChromeClient wcc = null;
        int androidSdkVer = Build.VERSION.SDK_INT;
        if (androidSdkVer >= 7) {
            wcc = new BridgeChromeClient7(this);
        } else {
            wcc = new BridgeChromeClient(this);
        }
        // Android3.x使用另外一个浏览器代理，详细原因查看@BridgeWebViewClient11
        if (androidSdkVer >= 11) {
            webViewClient = new BridgeWebViewClient11(this);
        } else {
            webViewClient = new BridgeWebViewClient(this);
        }
        this.webView = new BridgeWebView(WebBridge.this, wcc, webViewClient);
        webViewWeakRef = new WeakReference<WebView>(this.webView);


        /**
         * 清理webview内存缓存，来避免sdk资源文件更新后。缓存导致显示结果跟预期不一致的情况。
         */
        if (webViewClearRAMCacheNeeded) {
            this.webView.clearCache(false);
            webViewClearRAMCacheNeeded = false;
        }


        RelativeLayout.LayoutParams layoutParams = null;

        // ------------- ui逻辑 --------------
        // 设置顶部栏
        _viewTopBar = topBar(url);
        // 设置底部栏
        View bottomBar = bottomBar();
        if (_viewTopBar != null) {
            _viewTopBar.setId(ID_VIEW_TOP_BAR);

            layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.FILL_PARENT, UCApplication.dipToPx(WebBridge.TOP_BAR_HEIGHT_DIP));
            //            layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP, RelativeLayout.TRUE);
            this.rootLayout.addView(_viewTopBar, layoutParams);
        }

        // 设置内容webview
        layoutParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT);
        if (_viewTopBar != null) {
            // 相对于顶部栏定位
            layoutParams.addRule(RelativeLayout.BELOW, _viewTopBar.getId());
        }
        if (bottomBar != null) {
            layoutParams.addRule(RelativeLayout.ABOVE, bottomBar.getId());
        }
        this.rootLayout.addView(this.webView, layoutParams);


        layoutParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, UCApplication.dipToPx(4));
        _progressBar = new BridgeProgressBar(this, null, android.R.attr.seekBarStyle);
        if (_viewTopBar != null) {
            // 相对于顶部栏定位
            layoutParams.addRule(RelativeLayout.BELOW, _viewTopBar.getId());
        }
        this.rootLayout.addView(_progressBar, layoutParams);


        if (bottomBar != null) {
            RelativeLayout.LayoutParams bottomParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
            bottomParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM, RelativeLayout.TRUE);
            this.rootLayout.addView(bottomBar, bottomParams);
        }

        /**
         * 调出全屏键盘使用的隐藏EditText
         */
        hiddenEdForFullScreenKeyboard = new EditText(this);
        layoutParams = new RelativeLayout.LayoutParams(0, 0);
        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM, RelativeLayout.TRUE);
        hiddenEdForFullScreenKeyboard.setLayoutParams(layoutParams);
        hiddenEdForFullScreenKeyboard.setVisibility(View.GONE);
        rootLayout.addView(hiddenEdForFullScreenKeyboard);
    }

    /**
     * 在添加webview之前
     */
    protected View topBar(String url) {
        return null;
    }

    protected View bottomBar() {
        return null;
    }

    /**
     * Load the url into the webview.
     * 
     * @param url
     */
    public void loadUrl(final String url) {
        this.loadUrlIntoView(url);
    }

    /**
     * Load the url into the webview.
     * 
     * @param url
     */
    private void loadUrlIntoView(final String url) {
        final WebBridge me = this;

        // --------------url为空
        if (url == null) {
            this.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (me.urls.size() == 0) {
                        me.finish();
                    }

                }
            });
            UCApplication.toast("Url为空");
            return;
        }

        // --------------加载javascript
        if (url.startsWith(JAVASCRIPT)) {
            UCLog.debug(CLASS_NAME, "loadUrlIntoView", "WebBridge.loadUr = " + url);
            this.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (me.webView != null) {
                        me.webView.loadUrl(url);
                    }
                }
            });
            return;
        }

        // --------------http白名单拦截
        if ((url.startsWith(PREFIX_HTTP_PROTOCOL) || url.startsWith(PREFIX_HTTPS_PROTOCOL)) && !this.isUrlWhiteListed(url)) {
            this.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    // webview第一次加载
                    if (me.urls.size() == 0) {
                        me.finish();
                    } else {
                        me.webView.stopLoading();
                    }
                }
            });
            UCApplication.toast("Url=" + url + ", 访问被禁止");
            return;
        }

        this.currentUrl = url;

        if (!url.startsWith(JAVASCRIPT)) {
            UCLog.debug(CLASS_NAME, "loadUrlIntoView", String.format("WebBridge: url=%s", url));
        }

        this.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (me.webView == null) {
                    me.initWebUI(url);
                }
                UCLog.debug(CLASS_NAME, "initWebUI", "finished");
                me.urls.push(url);

                try {
                    me.webView.loadUrl(url);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void loadHttpUrlAsync(final String url) {
        final WebBridge me = this;
        final String ua = me.webView.getSettings().getUserAgentString();
        me.spinnerStart(LOADING_TIP_CONTENT, LoadingMask.TYPE_NORMAL);
        UCThreadFactory.createAndStart(new Runnable() {
            @Override
            public void run() {
                HttpConnection httpConn = new HttpConnection(ua);
                String content = httpConn.getBodyStrByGet(url, null);
                if (content == null) {
                    content = "网络没有响应，请稍后再试.";
                }
                final String finalContent = content;
                me.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        me.webView.loadDataWithBaseURL(url, finalContent, "text/plain", "utf-8", url);
                    }
                });
                me.spinnerStop();
            }
        });
    }

    /**
     * Clear web history in this web view.
     */
    public void clearBridgeHistory() {
        this.urls.clear();
        this.webView.clearHistory();
        this.onUpdateWebviewHistory();

        // Leave current url on history stack
        if (this.currentUrl != null) {
            this.urls.push(this.currentUrl);
        }

    }

    /**
     * 重置webview
     */
    public void clearWebview() {
        if (this.webView != null) {
            destoryBridgeRes();
        }
        this.webView = null;
    }

    /**
     * Go to previous page in history. (We manage our own history)
     * 
     * @return true if we went back, false if we are already at top
     */
    public boolean backHistory() {
        if (!enableBackHistory || this.webView == null) {
            UCLog.debug(CLASS_NAME, "backHistory", "Webbridge 返回历史没有生效");
            return false;
        }

        boolean toBack = false;
        // Check webview first to see if there is a history
        // This is needed to support curPage#diffLink, since they are added to
        // appView's history, but not our history url array (JQMobile behavior)
        if (this.webView.canGoBack()) {
            WebBackForwardList webbflist = this.webView.copyBackForwardList();
            WebHistoryItem historyItem = webbflist.getItemAtIndex(webbflist.getCurrentIndex() - 1);
            this.webView.loadUrl("javascript:try{bridge.fireDocumentEvent('bridgebackhistory', {'historyToBack' : '" + historyItem.getUrl() + "' }); }catch(e){console.log(e);};");
            this.webView.goBack();
            toBack = true;
        }

        /**
         * 延时100毫秒，来解决调用webview.goBack，浏览器没历史后， this.canGoBack依然返回true的bug
         */
        updateWebviewHistoryTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                WebBridge.this.onUpdateWebviewHistory();
            }
        }, 100);
        return toBack;
    }

    /**
     * 获取当前url，包含hash和参数。
     * 
     * @return
     */
    protected String getCurrentRealUrl() {
        WebBackForwardList webbflist = this.webView.copyBackForwardList();
        WebHistoryItem curHisItem = webbflist.getCurrentItem();
        return curHisItem != null ? curHisItem.getUrl() : "";
    }

    @Override
    /**
     * Called when the system is about to start resuming a previous activity. 
     */
    protected void onPause() {
        UCLog.debug(CLASS_NAME, "onPause", "onPause call");
        super.onPause();
        // Don't process pause if shutting down, since onDestroy() will be
        // called
        if (this.activityState == ACTIVITY_EXITING) {
            return;
        }

        if (this.webView == null) {
            return;
        }

        // If app doesn't want to run in background
        if (!this.keepRunning) {
            // Pause JavaScript timers (including setInterval)
            this.webView.pauseTimers();
        }
    }

    @Override
    /**
     * Called when the activity will start interacting with the user. 
     */
    protected void onResume() {
        UCLog.debug(CLASS_NAME, "onResume", "onResume call");
        WebView.enablePlatformNotifications();
        super.onResume();

        if (this.activityState == ACTIVITY_STARTING) {
            this.activityState = ACTIVITY_RUNNING;
            return;
        }

        if (this.webView == null) {
            return;
        }

        // Forward to plugins
        if (this.serviceManager != null) {
            this.serviceManager.onResume(this.keepRunning);
        }

        // If app doesn't want to run in background
        if (!this.keepRunning) {
            // Resume JavaScript timers (including setInterval)
            this.webView.resumeTimers();
        }
    }

    @Override
    /**
     * The final call you receive before your activity is destroyed. 
     */
    public void onDestroy() {
        UCLog.debug(CLASS_NAME, "onDestroy", "onDestroy call");
        destoryBridgeRes();
        super.onDestroy();
    }

    /**
     * 清空webview缓存
     */
    public void privateClearWebviewCache() {
        WebBridge.clearWebviewCache(this);
        if (this.webView != null) {
            this.webView.clearCache(true);
        }
    }

    /**
     * 清空webview缓存
     */
    public static void clearWebviewCache(Context ctx) {
        Context appContext = ctx.getApplicationContext();
        WebBridge.clearCache(appContext, 0);
        appContext.deleteDatabase("webview.db");
        appContext.deleteDatabase("webviewCache.db");
    }

    /**
     * 销毁bridge所使用到的资源
     */
    public void destoryBridgeRes() {
        if (this.webView != null) {
            this.webView.stopLoading();

            // Send destroy event to JavaScript
            this.webView.loadUrl("javascript:try{bridge.require('bridge/channel').onDestroy.fire();}catch(e){console.log('exception firing destroy event from native');};");

            // Load blank page so that JavaScript onunload is called
            this.webView.loadUrl("about:blank");
        }

        // Forward to plugins
        if (this.serviceManager != null) {
            this.serviceManager.onDestroy();
        }
    }

    /**
     * Send JavaScript statement back to JavaScript. (This is a convenience
     * method)
     * 
     * @param message
     */
    public void sendJavascript(String statement) {
        UCLog.debug(CLASS_NAME, "sendJavascript", statement);
        // We need to check for the null case on the Kindle Fire beacuse it
        // changes the width and height on load
        if (this.callbackServer != null)
            this.callbackServer.sendJavascript(statement);
    }

    /**
     * Load the specified URL in the Bridge webview or a new browser instance.
     * 
     * NOTE: If openExternal is false, only URLs listed in whitelist can be
     * loaded.
     * 
     * @param url
     *            The url to load.
     * @param openExternal
     *            Load url in browser instead of Bridge webview.
     * @param clearHistory
     *            Clear the history stack, so new page becomes top of history
     * @param params
     *            WebBridge parameters for new app
     */
    public void showWebPage(String url, boolean openExternal, boolean clearHistory, HashMap<String, Object> params) { // throws
        UCLog.debug(CLASS_NAME, "showWebPage", String.format("showWebPage(%s, %b, %b, HashMap", url, openExternal, clearHistory));// {

        // If clearing history
        if (clearHistory) {
            this.clearBridgeHistory();
        }

        // If loading into our webview
        if (!openExternal) {
            // Make sure url is in whitelist
            if (url.startsWith("file://") || isUrlWhiteListed(url)) {
                // Clear out current url from history, since it will be
                // replacing it
                if (clearHistory) {
                    this.urls.clear();
                }
                // Load new URL
                this.loadUrl(url);
            }
            // Load in default viewer if not
            else {
                UCLog.debug(CLASS_NAME, "showWebPage", String.format("showWebPage: Cannot load URL into webview since it is not in white list.  Loading into browser instead. (URL=" + url + ")"));// {
                try {
                    Intent intent = new Intent(Intent.ACTION_VIEW);
                    intent.setData(Uri.parse(url));
                    this.startActivity(intent);
                } catch (android.content.ActivityNotFoundException e) {
                    UCLog.warn(CLASS_NAME, "showWebPage", "Error loading url " + url + e.getMessage());
                }
            }
        }

        // Load in default view intent
        else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse(url));
                this.startActivity(intent);
            } catch (android.content.ActivityNotFoundException e) {
                UCLog.warn(CLASS_NAME, "showWebPage", "Error loading url " + url + e.getMessage());
            }
        }
    }

    /**
     * Show the spinner. Must be called from the UI thread.
     * 
     * @param title
     *            Title of the dialog
     * @param message
     *            The message of the dialog
     */
    public void spinnerStart(final String message, final int loadMaskType) {
        final WebBridge me = this;
        try {
            this.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (me.isFinishing()) {
                        return;
                    }
                    LoadingMask.showMask(WebBridge.this, message, cancelLoadOnClickListener, loadMaskType);
                }
            });
        } catch (Exception e) {
            UCLog.warn(CLASS_NAME, "spinnerStart", "加载菊花异常", e);
        }
    }


    /**
     * Stop spinner.
     * 
     * 加入timer控制，dialog不要频繁弹出
     * 
     */
    public void spinnerStop() {
        final WebBridge me = this;
        try {
            this.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (me.isFinishing()) {
                        return;
                    }
                    LoadingMask.hideMask(WebBridge.this);
                }
            });
        } catch (Exception e) {
            UCLog.warn(CLASS_NAME, "spinnerStop", "加载菊花异常", e);
        }
    }

    /**
     * 停止activity
     * 
     * 1 释放loading界面<br>
     * 2 释放加载ui的停止计时器
     */
    public synchronized void finish() {
        // ui 极容易出错
        try {
            LoadingMask.destoryMask();
            this.activityState = ACTIVITY_EXITING;
            super.finish();
        } catch (Exception e) {
            UCLog.error(CLASS_NAME, "finish", ErrorLogConst.ERROR_BUSINESS_INNERAPI, "ui异常", e);
        }
    }

    /**
     * Called when a key is down.
     * 
     * android1.6onkeyup事件返回键无法触发，故使用onkeydown
     * 
     * @param keyCode
     * @param event
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (this.webView == null) {
            return super.onKeyDown(keyCode, event);
        }

        // 拦截系统返回键按钮
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            if (keyboardBackButtonBound == true) {
                this.loadUrl("javascript:bridge.fireDocumentEvent('backbutton');");
                return true;
            }

            if (this.backHistory()) {
                return true;
            } else {
                if (enableKeyboardBackExit) {
                    this.activityState = ACTIVITY_EXITING;
                    return super.onKeyDown(keyCode, event);
                }
                // 禁用返回键退出sdk的功能
                else {
                    return true;
                }
            }
        }
        return super.onKeyDown(keyCode, event);
    }

    /**
     * 判断是否有返回历史
     * 
     * @return
     */
    public boolean hasBackHistory() {
        if (this.webView == null) {
            return false;
        }
        return this.webView.canGoBack();
    }

    /**
     * 获取当前url记载的域名
     * 
     * @return
     */
    public String getCurrentDomain() {
        try {
            String domain = new URL(this.currentUrl).getHost();
            if (StringUtil.isNullOrEmpty(domain)) {
                domain = "localhost";
            }
            UCLog.debug(CLASS_NAME, "getCurrentDomain", "domain = " + domain);
            return domain;
        } catch (MalformedURLException e) {
            UCLog.debug(CLASS_NAME, "getCurrentDomain", "domain获取失败 ");
            return null;
        }
    }

    /**
     * Report an error to the host application. These errors are unrecoverable
     * (i.e. the main resource is unavailable). The errorCode parameter
     * corresponds to one of the ERROR_* constants.
     * 
     * @param errorCode
     *            The error code corresponding to an ERROR_* value.
     * @param description
     *            A String describing the error.
     * @param failingUrl
     *            The url that failed to load.
     */
    public void onReceivedError(final int errorCode, final String description, final String failingUrl) {
        final WebBridge me = this;
        String message = "";
        if (errorCode == -8) {
            message = "网络加载较慢。如果有问题，请返回游戏后重试。";
        } else {
            message = "网络没有响应，请稍后再试。";
        }
        final String errMsg = message;
        me.runOnUiThread(new Runnable() {
            public void run() {
                if (me.isFinishing()) {
                    return;
                }
                if (me.webView != null) {
                    me.webView.stopLoading();
                }
                me.setProgress(100);
                me.spinnerStop();
                try {
                    AlertDialog.Builder ab = new AlertDialog.Builder(me);
                    ab.setMessage(errMsg);
                    ab.setCancelable(false);
                    ab.setNegativeButton("取消", null);
                    ab.show();
                    me.webView.setVisibility(View.VISIBLE);
                } catch (Exception e) {
                    UCLog.warn(CLASS_NAME, "onReceivedError", "ui异常");
                }
            }
        });
    }

    /**
     * Returns the top url on the stack without removing it from the stack.
     */
    public String peekAtUrlStack() {
        if (urls.size() > 0) {
            return urls.peek();
        }
        return "";
    }

    /**
     * Add a url to the stack
     * 
     * @param url
     */
    public void pushUrl(String url) {
        urls.push(url);
    }

    /**
     * 
     * @param
     * @return
     */
    public Stack<String> getUrls() {
        return urls;
    }

    private static final int MENU_ID_CLOSE_APP_CACHE = 1;
    private static final int MENU_ID_OPEN_APP_CACHE = 2;
    private static final int MENU_ID_CLEAR_APP_CACHE = 3;

    /*
     * Hook in WebBridge for menu plugins
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if (GlobalVars.debugMode) {
            menu.add(0, MENU_ID_CLOSE_APP_CACHE, 1, "关闭缓存");
            menu.add(0, MENU_ID_OPEN_APP_CACHE, 2, "开启缓存");
            menu.add(0, MENU_ID_CLEAR_APP_CACHE, 3, "清空缓存");
        }
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        return super.onPrepareOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
        case MENU_ID_CLOSE_APP_CACHE:
            SdkPreference.setAppCachePolicy(CommonConst.APP_CACHE_POLICY_DISABLE_AND_CLEAR);
            break;
        case MENU_ID_OPEN_APP_CACHE:
            SdkPreference.setAppCachePolicy(CommonConst.APP_CACHE_POLICY_ENABLE);
            break;
        case MENU_ID_CLEAR_APP_CACHE:
            this.privateClearWebviewCache();
            break;
        default:
            break;
        }
        return super.onOptionsItemSelected(item);
    }

    public Context getContext() {
        return this;
    }

    public boolean isUrlWhiteListed(String source) {
        return TrustDomain.isUrlFromTrustDomain(source);
    }

    @Override
    protected void onStop() {
        WebView.disablePlatformNotifications();
        super.onStop();
    }

    /**
     * 用于清理应用的缓存
     * 
     * @param dir
     * @param numDays
     * @return
     */
    static int clearCacheFolder(final File dir, final int numDays) {
        int deletedFiles = 0;
        if (dir != null && dir.isDirectory()) {
            try {
                for (File child : dir.listFiles()) {

                    //first delete subdirectories recursively
                    if (child.isDirectory()) {
                        deletedFiles += clearCacheFolder(child, numDays);
                    }
                    //then delete the files and subdirectories in this dir
                    //only empty directories can be deleted, so subdirs have been done first
                    if (child.lastModified() < new Date().getTime() - numDays * DateUtils.DAY_IN_MILLIS) {
                        if (child.delete()) {
                            deletedFiles++;
                        }
                    }
                }
            } catch (Exception e) {
                Log.e(CLASS_NAME, String.format("Failed to clean the cache, error %s", e.getMessage()));
            }
        }
        return deletedFiles;
    }

    /*
     * Delete the files older than numDays days from the application cache
     * 0 means all files.
     */
    public static void clearCache(final Context context, final int numDays) {
        clearCacheFolder(context.getCacheDir(), numDays);
    }

    /**
     * 接收bridge.js脚本运行前，H5在页面定义好的配置对象
     * 
     * @param jsonObject
     */
    public void onReceiveJsBridgeConfig(JSONObject jsonObject) {
    }


    public void onPageFinished(String url) {
        // TO OVERRIDE IT
    }

    @Override
    public void onUpdateWebviewHistory() {
        // override it
    }

    @Override
    public void onLowMemory() {
        super.onLowMemory();
        UCLog.warn(CLASS_NAME, "onLowMemory", "内存较低，请及时清理内存");
    }

    /**
     * 在webview被创建时，进行webview的缓存内存释放。
     */
    public static void toClearWebviewRAMCacheOnce() {
        GlobalVars.globalHandler.post(new Runnable() {
            @Override
            public void run() {
                if (webViewWeakRef != null) {
                    WebView wv = webViewWeakRef.get();
                    if (wv != null) {
                        wv.clearCache(false);
                    }
                } else {
                    webViewClearRAMCacheNeeded = true;
                }
            }
        });
    }

    public void onPageStarted(String url) {
        //override it
    }

    @Override
    public void bindBackButton(boolean override) {
        keyboardBackButtonBound = override;
    }

    @Override
    public void onKeyboardShow() {
    }

    @Override
    public void onKeyboardHide() {
    }
}