package cn.uc.gamesdk.bridge;


import android.annotation.TargetApi;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.net.http.SslError;
import android.os.Message;
import android.webkit.SslErrorHandler;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;
import cn.uc.gamesdk.common.UCApplication;
import cn.uc.gamesdk.log.UCLog;
import cn.uc.gamesdk.util.net.APNUtil;

/**
 * This class is the WebViewClient that implements callbacks for our web view.
 */
public class BridgeWebViewClient extends WebViewClient {

    protected WebBridge ctx;

    private static final String CLASS_NAME = "BridgeWebViewClient";

    public BridgeWebViewClient(WebBridge ctx) {
        this.ctx = ctx;
    }

    /**
     * Give the host application a chance to take over the control when a new
     * url is about to be loaded in the current WebView.
     * 
     * @param view
     *            The WebView that is initiating the callback.
     * @param url
     *            The url to be loaded.
     * @return true to override, false for default behavior
     */
    @Override
    public boolean shouldOverrideUrlLoading(WebView view, final String url) {
        UCLog.debug(CLASS_NAME, "shouldOverrideUrlLoading", "shouldOverrideUrlLoading url = " + url);
        if (url.startsWith(WebView.SCHEME_TEL)) {
            try {
                Intent intent = new Intent(Intent.ACTION_DIAL);
                intent.setData(Uri.parse(url));
                ctx.getContext().startActivity(intent);
            } catch (android.content.ActivityNotFoundException e) {
                UCLog.warn(CLASS_NAME, "shouldOverrideUrlLoading", "Error dialing " + url + ": " + e.toString());
            }
        }

        // If displaying map (geo:0,0?q=address)
        else if (url.startsWith("geo:")) {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse(url));
                ctx.getContext().startActivity(intent);
            } catch (android.content.ActivityNotFoundException e) {
                UCLog.warn(CLASS_NAME, "shouldOverrideUrlLoading", "Error showing map " + url + ": " + e.toString());
            }
        }

        // If sending email (mailto:abc@corp.com)
        else if (url.startsWith(WebView.SCHEME_MAILTO)) {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse(url));
                ctx.getContext().startActivity(intent);
            } catch (android.content.ActivityNotFoundException e) {
                UCLog.warn(CLASS_NAME, "shouldOverrideUrlLoading", "Error showing map " + url + ": " + e.toString());
            }
        }

        // If sms:5551212?body=This is the message
        else if (url.startsWith("sms:")) {
            try {
//                Intent intent = new Intent(Intent.ACTION_VIEW);

                // Get address
                String address = null;
                String content = "";
                int parmIndex = url.indexOf('?');
                if (parmIndex == -1) {
                    address = url.substring(4);
                } else {
                    address = url.substring(4, parmIndex);
                    // If body, then set sms body
                    Uri uri = Uri.parse(url);
                    String query = uri.getQuery();
                    if (query != null) {
                        if (query.startsWith("body=")) {
                            content = query.substring(5);
                        }
                    }
                }
                Uri uriSms = Uri.parse("smsto:" + address);    
                Intent intent = new Intent(Intent.ACTION_SENDTO, uriSms);
//                intent.setData(Uri.parse("sms:" + address));
//                intent.putExtra("address", address);
                intent.putExtra("sms_body", content);
//                intent.setType("vnd.android-dir/mms-sms");
                this.ctx.getContext().startActivity(intent);
            } catch (android.content.ActivityNotFoundException e) {
                UCLog.warn(CLASS_NAME, "shouldOverrideUrlLoading", "Error sending sms " + url + ": " + e.toString());
                Toast.makeText(ctx, "发送失败,请用手机编写短信发送.", Toast.LENGTH_SHORT).show();
            }
        }
        // All else
        else {
            if (url.startsWith("file://") || ctx.isUrlWhiteListed(url)) {
                this.ctx.loadUrl(url);
            } else {
                UCApplication.toast("Url=" + url + ", 访问被禁止");
            }
        }
        return true;
    }

    //    public void loadUrlByHttpClient(final WebView view, final String url) {
    //        final BridgeWebViewClient me = this;
    //        final String ua = view.getSettings().getUserAgentString();
    //        this.ctx.spinnerStart(WebBridge.LOADING_TIP_CONTENT, LoadingMask.TYPE_NORMAL);
    //        UCThreadFactory.createAndStart(new Runnable() {
    //            @Override
    //            public void run() {
    //                HttpConnection httpConn = new HttpConnection(ua);
    //                final DefaultHttpClient httpclient = (DefaultHttpClient) httpConn.getHttpClient();
    //                final String content = httpConn.getBodyStrWithRedirect(url, null);
    //                String targetUrl = url;
    //                if (httpConn.hasRedirectUrl()) {
    //                    targetUrl = httpConn.getRedirectUrl();
    //                }
    //                final String finalUrl = targetUrl;
    //                view.post(new Runnable() {
    //                    @Override
    //                    public void run() {
    //                        if (content != null) {
    //                            view.loadDataWithBaseURL(finalUrl, content, null, "utf8", finalUrl);
    //                        } else {
    //                            view.loadDataWithBaseURL(finalUrl, "网络没有响应", "text/html;charset=utf-8", "utf-8", finalUrl);
    //                        }
    //                        CookieStore cookieStore = httpclient.getCookieStore();
    //                        if (cookieStore != null) {
    //                            List<Cookie> cookies = cookieStore.getCookies();
    //                            if (!cookies.isEmpty()) {
    //                                CookieSyncManager.createInstance(view.getContext());
    //                                CookieManager cookieManager = CookieManager.getInstance();
    //                                //sync all the cookies in the httpclient with the webview by generating cookie string  
    //                                for (Cookie cookie : cookies) {
    //                                    //                                    Set-Cookie: LSID=DQAAAK…Eaem_vYg; Domain=docs.foo.com; Path=/accounts; Expires=Wed, 13-Jan-2021 22:23:01 GMT; Secure; HttpOnly
    //                                    System.out.println("cookie comment:" + cookie.getComment());
    //                                    System.out.println("cookie comment url:" + cookie.getCommentURL());
    //                                    System.out.println("cookie version:" + cookie.getVersion());
    //                                    String cookieString = cookie.getName() + "=" + cookie.getValue() + "; Domain=" + cookie.getDomain() + "; Path=" + cookie.getPath();
    //                                    if (cookie.getExpiryDate() != null)
    //                                        cookieString += "; Expires=" + cookie.getExpiryDate().toGMTString();
    //                                    System.out.println("cookie:" + cookieString);
    //                                    cookieManager.setCookie(finalUrl, cookieString);
    //                                    CookieSyncManager.getInstance().sync();
    //                                }
    //                            }
    //                        } else {
    //                            System.out.println("cookie store is null");
    //                        }
    //                        me.ctx.spinnerStop();
    //                    }
    //                });
    //            }
    //        });
    //
    //    }
    
    private long _startTime = 0;
    

    @Override
    public void onPageStarted(final WebView view, final String url, Bitmap favicon) {
        
        this.ctx.currentUrl = url;
        
        UCLog.debug(CLASS_NAME, "onPageStarted", "onPageStarted url = " + url);
        // Create a timeout timer for onPageStarted
        final WebBridge bridge = this.ctx;
        final int currentLoadUrlTimeout = bridge.loadUrlTimeout;
        Runnable runnable = new Runnable() {
            public void run() {
                try {
                    synchronized (this) {
                        wait(bridge.loadUrlTimeoutValue);
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                // If timeout, then stop loading and handle error
                if (bridge.loadUrlTimeout == currentLoadUrlTimeout) {
                    UCLog.warn(CLASS_NAME, "onPageStarted", "WebBridge: HTTP_TIMEOUT ERROR! - calling webViewClient");
                    bridge.webViewClient.onReceivedError(view, -8, "网络没有响应，请稍后再试.", url);
                }
            }
        };
        Thread thread = new Thread(runnable);
        thread.start();
        _startTime = System.currentTimeMillis();
        
        this.ctx.onPageStarted(url);
    }

    
    
    
    /**
     * Notify the host application that a page has finished loading.
     * 
     * @param view
     *            The webview initiating the callback.
     * @param url
     *            The url of the page.
     */
    @Override
    public void onPageFinished(WebView view, String url) {
        super.onPageFinished(view, url);
        UCLog.debug(CLASS_NAME, "onPageFinished", " url = " + url);

        // Clear timeout flag
        this.ctx.loadUrlTimeout++;

        // Try firing the onNativeReady event in JS. If it fails because the JS
        // is
        // not loaded yet then just set a flag so that the onNativeReady can be
        // fired
        // from the JS side when the JS gets to that code.
        if (url != null && !url.equals("about:blank")) {
            if (view != null) {
                view.loadUrl("javascript:try{ bridge.require('bridge/channel').onNativeReady.fire();}catch(e){_nativeReady = true;}");

                // cmwap下且不是本地url
                if (APNUtil.needSetProxy(ctx) && (!url.startsWith("file://"))) {
                    // 兼容4.x无效
                    view.loadUrl("javascript:try{if(!document.body.innerHTML || "
                    // 兼容2.2
                            + " document.body.innerHTML.toLowerCase().indexOf('doctype wml public') >= 0 ||" +
                            // 兼容小米
                            " (document.firstChild && document.firstChild.nodeName.toLowerCase() === 'wml'))" + "{ prompt('', 'gap_wml:');}}catch(e){if(console&&console.log){ console.log(e);}}");
                }
            }

        }
        this.ctx.onUpdateWebviewHistory();
        this.ctx.onPageFinished(url);
        
        Message msg = Message.obtain();
        msg.what = WebBridge.PROGRESS_UPDATE;
        msg.obj = 100;
        this.ctx.mHandler.sendMessage(msg);
        UCLog.debug(CLASS_NAME, "onPageFinished", "load url = " + url + "  take time = " + (System.currentTimeMillis() - _startTime + "(ms)"));
    }

    /**
     * Report an error to the host application. These errors are unrecoverable
     * (i.e. the main resource is unavailable). The errorCode parameter
     * corresponds to one of the ERROR_* constants.
     * 
     * @param view
     *            The WebView that is initiating the callback.
     * @param errorCode
     *            The error code corresponding to an ERROR_* value.
     * @param description
     *            A String describing the error.
     * @param failingUrl
     *            The url that failed to load.
     */
    @Override
    public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
        UCLog.debug(CLASS_NAME, "onReceivedError", String.format("WebBridge: GapViewClient.onReceivedError: Error code=%s Description=%s URL=%s", errorCode, description, failingUrl));

        // Clear timeout flag
        this.ctx.loadUrlTimeout++;

        // Stop "app loading" spinner if showing
        this.ctx.spinnerStop();

        // Handle error
        this.ctx.onReceivedError(errorCode, description, failingUrl);
    }

    @Override
    public void doUpdateVisitedHistory(WebView view, String url, boolean isReload) {
        /*
         * If you do a document.location.href the url does not get pushed on the
         * stack so we do a check here to see if the url should be pushed.
         */

        UCLog.debug(CLASS_NAME, "doUpdateVisitedHistory", " url = " + url + " isReload = " + isReload);

        if (!this.ctx.peekAtUrlStack().equals(url)) {
            this.ctx.pushUrl(url);
        }
        this.ctx.onUpdateWebviewHistory();
    }

    /**
     * 关于@TargetApi(8)，该接口只有2.2以后才有，如果我们没有覆盖android.webkit.WebViewClient。
     * 但是由于android.webkit.WebViewClient已经被我们覆盖，这里不需要做兼容调用。
     * 实际原理暂时还没详细调查，有兴趣者可以补上
     */
    @Override
    @TargetApi(8)
    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
        handler.proceed();
    }

    @Override
    public void onLoadResource(WebView view, String url) {
        UCLog.debug(CLASS_NAME, "onLoadResource", url);
        super.onLoadResource(view, url);
    }

}
