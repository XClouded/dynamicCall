/*
       Licensed to the Apache Software Foundation (ASF) under one
       or more contributor license agreements.  See the NOTICE file
       distributed with this work for additional information
       regarding copyright ownership.  The ASF licenses this file
       to you under the Apache License, Version 2.0 (the
       "License"); you may not use this file except in compliance
       with the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing,
       software distributed under the License is distributed on an
       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       KIND, either express or implied.  See the License for the
       specific language governing permissions and limitations
       under the License.
 */
package cn.uc.gamesdk.bridge.api;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import org.json.JSONException;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.content.Intent;
import android.content.res.XmlResourceParser;
import android.util.Log;
import android.webkit.WebView;
import cn.uc.gamesdk.bridge.BridgeConfig;
import cn.uc.gamesdk.log.ErrorLogConst;
import cn.uc.gamesdk.log.UCLog;

/**
 * ServiceManager is exposed to JavaScript in the Cordova WebView.
 * 
 * Calling native service code can be done by calling ServiceManager.exec(...)
 * from JavaScript.
 */
public class ServiceManager {
    private static final String CLASS_NAME = "ServiceManager";

    // List of service entries
    private final HashMap<String, ServiceEntry> entries = new HashMap<String, ServiceEntry>();

    private final BridgeInterface ctx;
    private final WebView app;


    // Flag to track first time through
    private boolean firstRun;

    // Map URL schemes like foo: to service that want to handle those schemes
    // This would allow how all URLs are handled to be offloaded to a service
    protected HashMap<String, String> urlMap = new HashMap<String, String>();

    /**
     * Constructor.
     * 
     * @param app
     * @param ctx
     */
    public ServiceManager(WebView app, BridgeInterface ctx) {
        this.ctx = ctx;
        this.app = app;
        this.firstRun = true;
    }


    /**
     * Init when loading a new HTML page into webview.
     */
    public void init() {
        UCLog.debug(CLASS_NAME, "init", "init()");

        // If first time, then load service from service.xml file
        if (firstRun) {
            try {
                this.loadServices();
            } catch (IOException e) {
                Log.e(CLASS_NAME, "请不要移动asset目录的文件");
                e.printStackTrace();
            } catch (XmlPullParserException e) {
                Log.e(CLASS_NAME, "请不要移动asset目录的文件");
                e.printStackTrace();
            }
            firstRun = false;
        }

        // Stop service on current HTML page and discard service objects
        else {
            this.onPause(false);
            this.onDestroy();
            this.clearServiceObjects();
        }

        // Start up all service that have onload specified
        this.startupServices();
    }

    /**
     * Load service from res/xml/service.xml
     * 
     * @throws IOException
     * @throws XmlPullParserException
     */
    public void loadServices() throws IOException, XmlPullParserException {
        InputStream is = this.ctx.getAssets().open(BridgeConfig.ASSET_PATH_SERIVCE_XML);
        //    	System.out.println("DEBUG: in loadServices:inputStream=" + is);
        XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
        factory.setValidating(false);
        XmlPullParser xml = factory.newPullParser();
        xml.setInput(is, null);
        int eventType = -1;
        String service = "", serviceClass = "";
        boolean onload = false;
        ServiceEntry entry = null;
        while (eventType != XmlResourceParser.END_DOCUMENT) {
            if (eventType == XmlResourceParser.START_TAG) {
                String strNode = xml.getName();
                if (strNode.equals("service")) {
                    service = xml.getAttributeValue(null, "name");
                    serviceClass = xml.getAttributeValue(null, "value");
                    onload = "true".equals(xml.getAttributeValue(null, "onload"));
                    entry = new ServiceEntry(service, serviceClass, onload);
                    this.addService(entry);
                } else if (strNode.equals("url-filter")) {
                    this.urlMap.put(xml.getAttributeValue(null, "value"), service);
                }
            }
            try {
                eventType = xml.next();
            } catch (XmlPullParserException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Delete all service objects.
     */
    public void clearServiceObjects() {
        for (ServiceEntry entry : this.entries.values()) {
            entry.service = null;
        }
    }

    /**
     * Create service objects that have onload set.
     */
    public void startupServices() {
        for (ServiceEntry entry : this.entries.values()) {
            if (entry.onload) {
                entry.createService(this.app, this.ctx);
            }
        }
    }

    /**
     * Receives a request for execution and fulfills it by finding the appropriate
     * Java class and calling it's execute method.
     * 
     * ServiceManager.exec can be used either synchronously or async. In either case, a JSON encoded
     * string is returned that will indicate if any errors have occurred when trying to find
     * or execute the class denoted by the clazz argument.
     * 
     * @param service
     *            String containing the service to run
     * @param action
     *            String containt the action that the class is supposed to perform. This is
     *            passed to the service execute method and it is up to the service developer
     *            how to deal with it.
     * @param callbackId
     *            String containing the id of the callback that is execute in JavaScript if
     *            this is an async service call.
     * @param paramObj
     *            An Array literal string containing any arguments needed in the
     *            service execute method.
     * @param async
     *            Boolean indicating whether the calling JavaScript code is expecting an
     *            immediate return value. If true, either Cordova.callbackSuccess(...) or
     *            Cordova.callbackError(...) is called once the service code has executed.
     * 
     * @return JSON encoded string with a response message and status.
     */
    public String exec(final String serviceName, final String action, final String callbackId, final String jsonArgs, final boolean async) {
        ServiceResult cr = null;
        boolean runAsync = async;
        try {
            final JSONObject paramObj = new JSONObject(jsonArgs);
            final IService service = this.getService(serviceName);
            final BridgeInterface ctx = this.ctx;
            if (service != null) {
                // 将service输出的日志中密码部分转为星号,避免输出 liangyc @ 2012-12-15
                String logParamObj = removePasswordContent(paramObj.toString());
                UCLog.debug(CLASS_NAME, "exec", "H5 service=" + serviceName + ", action=" + action + ", paramObj=" + logParamObj);

                runAsync = async && !service.isSynch(action);
                if (runAsync) {
                    // Run this on a different thread so that this one can return back to JS
                    Thread thread = new Thread(new Runnable() {
                        public void run() {
                            try {
                                // Call execute on the service so that it can do it's thing
                                ServiceResult cr = service.execute(action, paramObj, callbackId);
                                if (cr == null) {
                                    UCLog.debug(serviceName, action, ErrorLogConst.ERROR_MSG_ACT_NO_RESULT_OR_NOT_FOUND);
                                    cr = new ServiceResult(ServiceResult.Status.INVALID_ACTION);
                                }
                                int status = cr.getStatus();
                                // If no result to be sent and keeping callback, then no need to sent back to JavaScript
                                if ((status == ServiceResult.Status.NO_RESULT.ordinal()) && cr.getKeepCallback()) {
                                }
                                // Check the success (OK, NO_RESULT & !KEEP_CALLBACK)
                                else if ((status == ServiceResult.Status.OK.ordinal()) || (status == ServiceResult.Status.NO_RESULT.ordinal())) {
                                    ctx.sendJavascript(cr.toSuccessCallbackString(callbackId));
                                }

                                // If error
                                else {
                                    ctx.sendJavascript(cr.toErrorCallbackString(callbackId));
                                }
                            } catch (Exception e) {
                                Log.e(CLASS_NAME, "method=exec", e);
                                ServiceResult cr = new ServiceResult(ServiceResult.Status.ERROR, e.getMessage());
                                ctx.sendJavascript(cr.toErrorCallbackString(callbackId));
                            }
                        }
                    });
                    thread.start();
                    return "";
                } else {
                    // Call execute on the service so that it can do it's thing
                    cr = service.execute(action, paramObj, callbackId);
                    if (cr == null) {
                        Log.w(CLASS_NAME, "serviceName = " + serviceName + ", action = " + action + ", can't found the service");
                        cr = new ServiceResult(ServiceResult.Status.INVALID_ACTION);
                    }
                    // If no result to be sent and keeping callback, then no need to sent back to JavaScript
                    if ((cr.getStatus() == ServiceResult.Status.NO_RESULT.ordinal()) && cr.getKeepCallback()) {
                        return "";
                    }
                }
            } else {
                System.out.println("ERROR: Service not found ServiceName " + serviceName);
            }
        } catch (JSONException e) {
            Log.e(CLASS_NAME, "method=exec", e);
            cr = new ServiceResult(ServiceResult.Status.JSON_EXCEPTION);
        }
        // if async we have already returned at this point unless there was an error...
        if (runAsync) {
            if (cr == null) {
                cr = new ServiceResult(ServiceResult.Status.CLASS_NOT_FOUND_EXCEPTION);
            }
            ctx.sendJavascript(cr.toErrorCallbackString(callbackId));
        }

        String result = (cr != null ? cr.getJSONString() : "{ status: 0, message: 'all good' }");
        // 将service输出的日志中密码部分转为星号,避免输出 liangyc @ 2012-12-15
        String logResult = removePasswordContent(result);
        UCLog.debug(CLASS_NAME, "exec", "H5 service=" + serviceName + ", action=" + action + ", result=" + logResult);
        return result;
    }

    /**
     * Get the service object that implements the service.
     * If the service object does not already exist, then create it.
     * If the service doesn't exist, then return null.
     * 
     * @param service
     *            The name of the service.
     * @return IService or null
     */
    private IService getService(String serviceName) {
        ServiceEntry entry = entries.get(serviceName);
        if (entry == null) {
            return null;
        }
        IService service = entry.service;
        if (service == null) {
            service = entry.createService(this.app, this.ctx);
        }
        return service;
    }

    /**
     * Add a service class that implements a service to the service entry table.
     * This does not create the service object instance.
     * 
     * @param service
     *            The service name
     * @param className
     *            The service class name
     */
    public void addService(String service, String className) {
        ServiceEntry entry = new ServiceEntry(service, className, false);
        this.addService(entry);
    }

    /**
     * Add a service class that implements a service to the service entry table.
     * This does not create the service object instance.
     * 
     * @param entry
     *            The service entry
     */
    public void addService(ServiceEntry entry) {
        this.entries.put(entry.serviceName, entry);
    }

    /**
     * Called when the system is about to start resuming a previous activity.
     * 
     * @param multitasking
     *            Flag indicating if multitasking is turned on for app
     */
    public void onPause(boolean multitasking) {
        for (ServiceEntry entry : this.entries.values()) {
            if (entry.service != null) {
                entry.service.onPause(multitasking);
            }
        }
    }

    /**
     * Called when the activity will start interacting with the user.
     * 
     * @param multitasking
     *            Flag indicating if multitasking is turned on for app
     */
    public void onResume(boolean multitasking) {
        for (ServiceEntry entry : this.entries.values()) {
            if (entry.service != null) {
                entry.service.onResume(multitasking);
            }
        }
    }

    /**
     * The final call you receive before your activity is destroyed.
     */
    public void onDestroy() {
        for (ServiceEntry entry : this.entries.values()) {
            if (entry.service != null) {
                entry.service.onDestroy();
            }
        }
    }

    /**
     * Send a message to all service.
     * 
     * @param id
     *            The message id
     * @param data
     *            The message data
     */
    public void postMessage(String id, Object data) {
        for (ServiceEntry entry : this.entries.values()) {
            if (entry.service != null) {
                entry.service.onMessage(id, data);
            }
        }
    }

    /**
     * Called when the activity receives a new intent.
     */
    public void onNewIntent(Intent intent) {
        for (ServiceEntry entry : this.entries.values()) {
            if (entry.service != null) {
                entry.service.onNewIntent(intent);
            }
        }
    }

    /**
     * Called when the URL of the webview changes.
     * 
     * @param url
     *            The URL that is being changed to.
     * @return Return false to allow the URL to load, return true to prevent the URL from loading.
     */
    public boolean onOverrideUrlLoading(String url) {
        Iterator<Entry<String, String>> it = this.urlMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, String> pairs = it.next();
            if (url.startsWith(pairs.getKey())) {
                return this.getService(pairs.getValue()).onOverrideUrlLoading(url);
            }
        }
        return false;
    }

    @SuppressWarnings("unused")
    private void serviceConfigurationMissing() {
        System.err.println("=====================================================================================");
        System.err.println("ERROR: service.xml is missing.  Add res/xml/service.xml to your project.");
        System.err.println("https://git-wip-us.apache.org/repos/asf?p=incubator-cordova-android.git;a=blob;f=framework/res/xml/service.xml");
        System.err.println("=====================================================================================");
    }
    
    /**
     * 将json子串中password中的内容或者randomPassword的内容替换为星号,再给debug日志输出
     * @param msg
     * @return
     */
    private String removePasswordContent(String msg) {
        String retMsg = msg;
        if (retMsg.contains("\"password\":\"") || retMsg.contains("\\\"password\\\":\\\"")) {
            retMsg = retMsg.replaceAll("\\\\?\"password\\\\?\":\\\\?\".*?\\\\?\"", "\"password\":\"*\"");
        }
        if (retMsg.contains("\"randomPassword\":\"") || retMsg.contains("\\\"randomPassword\\\":\\\"")) {
            retMsg = retMsg.replaceAll("\\\\?\"randomPassword\\\\?\":\\\\?\".*?\\\\?\"", "\"randomPassword\":\"*\"");
        }
        if (retMsg.contains("\"oldPassword\":\"") || retMsg.contains("\\\"oldPassword\\\":\\\"")) {
            retMsg = retMsg.replaceAll("\\\\?\"oldPassword\\\\?\":\\\\?\".*?\\\\?\"", "\"oldPassword\":\"*\"");
        }
        if (retMsg.contains("\"newPassword\":\"") || retMsg.contains("\\\"newPassword\\\":\\\"")) {
            retMsg = retMsg.replaceAll("\\\\?\"newPassword\\\\?\":\\\\?\".*?\\\\?\"", "\"newPassword\":\"*\"");
        }
        
        return retMsg;
    }
}
