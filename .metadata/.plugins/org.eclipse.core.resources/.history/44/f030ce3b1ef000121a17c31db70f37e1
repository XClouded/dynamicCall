package cn.uc.gamesdk;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import cn.uc.gamesdk.entity.DexClassPath;
import cn.uc.gamesdk.iconst.CApi;
import cn.uc.gamesdk.iface.IDexClassLoader;
import cn.uc.gamesdk.iface.IDispatcher;
import cn.uc.gamesdk.tools.FileUtil;
import cn.uc.gamesdk.tools.GlobalVars;
import dalvik.system.DexClassLoader;

public class DexLoader implements IDexClassLoader {

	private static final String CLASS_NAME="DexLoader";
	
	private static DexLoader dexLoader = null;// 保存加载dex的对象
	private Map<String, DexClassPath> dexPathMap = null;
	private Set<DexClassPath> dexSet = null;// 保存无重复而会用到的dex名字

	public static DexLoader getInstance() {
		if (null == dexLoader)
			dexLoader = new DexLoader();

		return dexLoader;

	}

	public Map<String, IDispatcher> Creator() {
		initConfig();

		Map<String, IDispatcher> dexLoaderMap = null;
		IDispatcher classDispatcher = null;

		for (DexClassPath dexClass : dexSet) {
			String className = dexClass.classPath;
			String dexName = dexClass.dexPath;

			DexClassLoader classLoader = new DexClassLoader(
					FileUtil.getFilePath() + File.separator + dexName,
					FileUtil.getCachePath(), null,
					GlobalVars.context.getClassLoader());

			try {
				Class libProviderClass = classLoader.loadClass(className);
				Method getInstanceMethod = libProviderClass.getDeclaredMethod(
						"getInstance", null);

				classDispatcher = (IDispatcher) getInstanceMethod.invoke(null,
						null);
				dexLoaderMap.put(dexName, classDispatcher);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
		}
		return dexLoaderMap;
	}

	/*
	 * 主要是从配置文件中获取接口对应的入口类与所在DEX文件名（目前硬编码)
	 */
	private void initConfig() {
		dexPathMap = new HashMap<String, DexClassPath>();

		dexSet = new LinkedHashSet<DexClassPath>();

		DexClassPath core = new DexClassPath();
		core.classPath = "cn.uc.gamesdk.core.Dispatcher";
		core.dexPath = "jars/core.jar";
		dexSet.add(core);

		DexClassPath update = new DexClassPath();
		update.classPath = "cn.uc.gamesdk.update.Dispatcher";
		update.dexPath = "jars/update.jar";
		dexSet.add(update);

		dexPathMap.put(CApi.API_LOGIN, core);
		dexPathMap.put(CApi.API_INIT, core);
		dexPathMap.put(CApi.API_WEBVIEW, core);
		dexPathMap.put(CApi.API_UPDATE, update);
	}

	public void releaseControl() {
		dexPathMap = null;
		System.gc();
	}

}
